# Makefile for media-stack environment configuration

# Default target
all: .env

# Check if secrets.env exists, if not provide helpful error
check-secrets:
	@if [ ! -f env/secrets.env ]; then \
		echo "❌ ERROR: env/secrets.env not found!"; \
		echo ""; \
		echo "This appears to be a first-time setup. Please run:"; \
		echo "  cp env/secrets.env.example env/secrets.env"; \
		echo ""; \
		echo "Then edit env/secrets.env and update the fields with your actual values."; \
		echo ""; \
		exit 1; \
	fi

# Generate .env by concatenating common.env and secrets.env
.env: env/common.env check-secrets
	@echo "Generating .env from source files..."
	@echo "# Auto-generated .env file" > .env
	@echo "# Generated from env/common.env and env/secrets.env" >> .env
	@echo "# Do not edit this file directly - edit the source files instead" >> .env
	@echo "" >> .env
	@echo "# === Common Configuration ===" >> .env
	@cat env/common.env >> .env
	@echo "" >> .env
	@echo "# === Secrets Configuration ===" >> .env
	@cat env/secrets.env >> .env
	@echo ".env file generated successfully"

# Clean target to remove generated .env file
clean:
	@echo "Removing generated .env file..."
	@rm -f .env
	@echo "Clean complete"

# Force regeneration of .env file
force: clean .env

# Show help
help:
	@echo "Available targets:"
	@echo "  all (default) - Generate .env from source files"
	@echo "  .env          - Generate .env from source files"
	@echo "  clean         - Remove generated .env file"
	@echo "  force         - Force regeneration of .env file"
	@echo "  check-secrets - Check if env/secrets.env exists"
	@echo "  help          - Show this help message"
	@echo ""
	@echo "Note: If env/secrets.env doesn't exist, you'll need to:"
	@echo "  cp env/secrets.env.example env/secrets.env"
	@echo "  # Then edit env/secrets.env with your actual values"

.PHONY: all clean force help check-secrets 